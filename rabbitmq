1.https://www.rabbitmq.com/img/tutorials/python-one-overall.png
#sender

establish a connection with RabbitMQ server.
#!/usr/bin/env python
import pika

connection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))
channel = connection.channel()

#We're connected now, to a broker on the local machine
#Next, before sending we need to make sure the recipient queue exists
#If we send a message to non-existing location, RabbitMQ will just drop the message. 
#Let's create a hello queue to which the message will be delivered:
channel.queue_declare(queue='hello')



#In RabbitMQ a message can never be sent directly to the queue, it always needs to go through an exchange.
channel.basic_publish(exchange='',
                      routing_key='hello',
                      body='Hello World!')
print(" [x] Sent 'Hello World!'")


#Before exiting the program we need to make sure the network buffers were flushed and our message was actually delivered 
to RabbitMQ. We can do it by gently closing the connection
connection.close()


#Receiving
first we need to connect to RabbitMQ server. The code responsible for connecting to Rabbit is the same as previously

The next step, just like before, is to make sure that the queue exists. Creating a queue using queue_declare is idempotent

channel.queue_declare(queue='hello')

Listing queues
sudo rabbitmqctl list_queues

Receiving messages from the queue is more complex. It works by subscribing a callback function to a queue.
Whenever we receive a message, this callback function is called by the Pika library.

def callback(ch, method, properties, body):
    print(" [x] Received %r" % body)
    
 Next, we need to tell RabbitMQ that this particular callback function should receive messages from our hello queue:
 
 channel.basic_consume(callback,
                      queue='hello',
                      no_ack=True)
enter a never-ending loop that waits for data and runs callbacks whenever necessary.

print(' [*] Waiting for messages. To exit press CTRL+C')
channel.start_consuming()

send.py:
#!/usr/bin/env python
import pika

connection = pika.BlockingConnection(pika.ConnectionParameters(host='localhost'))
channel = connection.channel()


channel.queue_declare(queue='hello')

channel.basic_publish(exchange='',
                      routing_key='hello',
                      body='Hello World!')
print(" [x] Sent 'Hello World!'")
connection.close()


receive.py 
#!/usr/bin/env python
import pika

connection = pika.BlockingConnection(pika.ConnectionParameters(host='localhost'))
channel = connection.channel()


channel.queue_declare(queue='hello')

def callback(ch, method, properties, body):
    print(" [x] Received %r" % body)

channel.basic_consume(callback,
                      queue='hello',
                      no_ack=True)

print(' [*] Waiting for messages. To exit press CTRL+C')
channel.start_consuming()

python receive.py
python send.py






