@staticmethod和@classmethod的作用与区别
1.使用@staticmethod或@classmethod，就可以不需要实例化，直接类名.方法名()来调用。
2.@staticmethod不需要表示自身对象的self和自身类的cls参数，就跟使用函数一样。
3.@classmethod也不需要self参数，但第一个参数需要是表示自身类的cls参数。
4.如果在@staticmethod中要调用到这个类的一些属性方法，只能直接类名.属性名或类名.方法名。而@classmethod因为持有cls参数，可以来调用类的属性，类的方法，实例化对象等，避免硬编码。
##########代码###################################
class A(object):  
    bar = 1  
    def foo(self):  
        print 'foo'  
 
    @staticmethod  
    def static_foo():  
        print 'static_foo'  
        print A.bar  
 
    @classmethod  
    def class_foo(cls):  
        print 'class_foo'  
        print cls.bar  
        cls().foo()  
  
A.static_foo()  
A.class_foo()
#################################################
2.使用__slots__ 来限制该class能添加的属性，__slots__定义的属性仅对当前类起作用，对继承的子类是不起作用的
 class Student(object):
...     __slots__ = ('name', 'age') # 用tuple定义允许绑定的属性名称

3.使用@property 装饰器就是负责把一个方法变成属性调用的
class Student(object):

    @property
    def score(self):
        return self._score

    @score.setter
    def score(self, value):
        if not isinstance(value, int):
            raise ValueError('score must be an integer!')
        if value < 0 or value > 100:
            raise ValueError('score must between 0 ~ 100!')
        self._score = value
        
        
        
        
        
        
