在settings中设置静态文件目录
STATICFILES_DIRS = (os.path.join(BASE_DIR,'static'),)
if request.method == "POST":
   user=request.POST.get('user',None)
   pwd = request.POST.get('pwd',None)
   
试图渲染数据到前端   
User_list=[
{'username':'gzw','gender':'nv','email':'abc@ss.com'},
]

for index in range(20):
  temp = {'username':'gzw'+str(index),'gender':'nv','email':'abc@ss.com'}
  User_list.append(temp)
  
  def home(request):
     return render(request,'home.html',{'user_list': User_list})
     
  单选按钮数据获取
  男：<input type="radio" name="gender" value="1" />
  女：<input type="radio" name="gender" value="2" />
  
  gender=request.POST.get('gender')
  
  多选按钮数据提交
   男：<input type="checkbox" name="favor" value="11" />
  女：<input type="checkbox" name="favor" value="22" />
  favor= request.POST.getlist('favor')
  
  select 单选数据提交 (get)
  <select name="city">
    <option value='sh'>shanghai</option>
    <option value='bj'>beijing</option>
    <option value='tj'>tianjing</option>
    </select>
    
  select 多选数据提交 (getlist)
  <select name="city" multiple>
    <option value='sh'>shanghai</option>
    <option value='bj'>beijing</option>
    <option value='tj'>tianjing</option>
    </select>
    
    
    文件上传（需要知道文件名，文件内容）
    文件上传后，文件名，内容都存在了request.FILES中
    form文件上传必须有enctype="multipart/form-data" 属性
    <form action="" method="POST" enctype="multipart/form-data">
    <input type='file' name='fa' />
    
    fa_obj= request.FILES.get('fa')
    
    获取文件名：fa_obj.name
    import os
    file_path=os.paht.join('upload',fa_obj.name)
    for file_content in fa_obj.chunks():
        with open(file_path,'wb') as f:
          f.write(file_content)
    
    CBV
    url设置
    url(r'^home/',views.Home.as_view()),
    from django.views import View
    class Home(View):
       def get(self,request):
           pass
       def post(self,request):
           pass


request.path_info  当前的url
url(r'^adfsdf/',views.index,name='i1'),
url(r'^yug/(\d+)/(\d+)/',views.index,name='i2'),
url(r'^buy/(?P<pid>\d+)/(?P<nid>\d+)/',views.index,name='i3'),
在视图函数中生成url
def func(request,*args,**kwargs):
  from django.urls import reverse
  url1 = reverse('index')
  url2=reverse('index',args=(1,2,))
  url3 = reverse('index',kwargs={'pid':1,'nid':9}
  
  xx.html
  
  {% url "i1" %}
  {% url "i2" 1 2 %}
  {% url "i3" pid=1 nid=2 %}

django 使用mysql
在__init__.py下添加如下配置
import pymysql
pymysql.install_as_MySQLdb()

orm 操作
创建
1:    models.Userinfo.objects.create(username='root',password='123')
2:    obj=models.Userinfo(username='root',password='123')
      obj.save()
3:    dic= {'username'：'eee','password':'666'}
      models.Userinfo.objects.create(**dic)
#查询
   查询所有
   result = models.Userinfo.objects.all()
   #result 是一个querySet类型，可以理解为是一个列表[obj(id,username,password),obj(id,username,password),obj(id,username,password)]
   
   根据条件查询
   result = models.Userinfo.objects.filter(username='root')
   result = models.Userinfo.objects.filter(username='root',password='123') and操作
   #result 是一个querySet类型

#删除
models.Userinfo.objects.all().delete()  全部删除
models.Userinfo.objects.filter(name='ee').delete()

#更新

models.Userinfo.objects.all().update(password=666)
models.Userinfo.objects.filter(id=4).update(password=666)






