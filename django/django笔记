在settings中设置静态文件目录
STATICFILES_DIRS = (os.path.join(BASE_DIR,'static'),)
if request.method == "POST":
   user=request.POST.get('user',None)
   pwd = request.POST.get('pwd',None)
   
试图渲染数据到前端   
User_list=[
{'username':'gzw','gender':'nv','email':'abc@ss.com'},
]

for index in range(20):
  temp = {'username':'gzw'+str(index),'gender':'nv','email':'abc@ss.com'}
  User_list.append(temp)
  
  def home(request):
     return render(request,'home.html',{'user_list': User_list})
     
  单选按钮数据获取
  男：<input type="radio" name="gender" value="1" />
  女：<input type="radio" name="gender" value="2" />
  
  gender=request.POST.get('gender')
  
  多选按钮数据提交
   男：<input type="checkbox" name="favor" value="11" />
  女：<input type="checkbox" name="favor" value="22" />
  favor= request.POST.getlist('favor')
  
  select 单选数据提交 (get)
  <select name="city">
    <option value='sh'>shanghai</option>
    <option value='bj'>beijing</option>
    <option value='tj'>tianjing</option>
    </select>
    
  select 多选数据提交 (getlist)
  <select name="city" multiple>
    <option value='sh'>shanghai</option>
    <option value='bj'>beijing</option>
    <option value='tj'>tianjing</option>
    </select>
    
    
    文件上传（需要知道文件名，文件内容）
    文件上传后，文件名，内容都存在了request.FILES中
    form文件上传必须有enctype="multipart/form-data" 属性
    <form action="" method="POST" enctype="multipart/form-data">
    <input type='file' name='fa' />
    
    fa_obj= request.FILES.get('fa')
    
    获取文件名：fa_obj.name
    import os
    file_path=os.paht.join('upload',fa_obj.name)
    for file_content in fa_obj.chunks():
        with open(file_path,'wb') as f:
          f.write(file_content)
    
    CBV
    url设置
    url(r'^home/',views.Home.as_view()),
    from django.views import View
    class Home(View):
       def get(self,request):
           pass
       def post(self,request):
           pass


request.path_info  当前的url
url(r'^adfsdf/',views.index,name='i1'),
url(r'^yug/(\d+)/(\d+)/',views.index,name='i2'),
url(r'^buy/(?P<pid>\d+)/(?P<nid>\d+)/',views.index,name='i3'),
在视图函数中生成url
def func(request,*args,**kwargs):
  from django.urls import reverse
  url1 = reverse('index')
  url2=reverse('index',args=(1,2,))
  url3 = reverse('index',kwargs={'pid':1,'nid':9}
  
  xx.html
  
  {% url "i1" %}
  {% url "i2" 1 2 %}
  {% url "i3" pid=1 nid=2 %}

django 使用mysql
在__init__.py下添加如下配置
import pymysql
pymysql.install_as_MySQLdb()

orm 操作
创建
1:    models.Userinfo.objects.create(username='root',password='123')
2:    obj=models.Userinfo(username='root',password='123')
      obj.save()
3:    dic= {'username'：'eee','password':'666'}
      models.Userinfo.objects.create(**dic)
#查询
   查询所有
   result = models.Userinfo.objects.all()
   #print result.query()  #打印出sql语句
   #result 是一个querySet类型，可以理解为是一个列表[obj(id,username,password),obj(id,username,password),obj(id,username,password)]
   
    result = models.Userinfo.objects.all().values(id,caption)  #查询的结果也为queryset集合，集合里面就是对象了[{'id':1,'caption':'db'},{},{}]
    #前端展示row.id
    
    result = models.Userinfo.objects.all().values_list(id,caption) #querySet集合，内部元素为元祖 [(1,'db'),(2,'ma')]
    #前端展示row.0 row.1
    
    
   根据条件查询
   result = models.Userinfo.objects.filter(username='root')
   result = models.Userinfo.objects.filter(username='root',password='123') and操作
   #result 是一个querySet类型

#删除
models.Userinfo.objects.all().delete()  全部删除
models.Userinfo.objects.filter(name='ee').delete()

#更新

models.Userinfo.objects.all().update(password=666)
models.Userinfo.objects.filter(id=4).update(password=666)

设置自增Id
uid=models.AutoField(primary_key=True)

字段参数：
null  db是否可以为空
default  默认值
primary_key  主键
db_column   列名
db_index=True   索引
unique=True  唯一索引
unique_for_date  只对时间做索引
unique_for_month 只对月份做索引
unique_for_year  只对年份做索引
auto_now=True  创建时，自动生成
auto_now_add=True  更新时，自动生成
ctime=models.DateTimeField(auto_now_add=True,null=True) 后期时间不会更新
uptime = models.DateTimeField(auto_now=True) 更新的时候，时间自动更新，并且需要按照下面的更新方式，才会更新
    obj=UserGroup.objects.filter(id=1).filter()
    obj.caption="CEO"
    obj.save()
    
choices django admin 中显示下拉框，避免连表查询

user_type_choices= (
  (1,"超级用户"),
  (2,"普通用户"),
  (3,"普普通用户"),
)
user_type_id=models.IntegerField(choices=user_type_choices,default=1)

blank=True  django admin是否可以为空

verbose_name="用户名"  django admin 中字段显示中文
editable=False  是否可以被编辑
error_messages
help_text="dfdfd" 注释，提示信息
validators  自定义验证机制错误信息

外键
user_group = models.ForeignKey("UserGroup",to_field='uid',default=1)

{{ forloop.counter }}   #显示循环次数
{{ forloop.counter0 }}   #显示循环次数从0开始
{{ forloop.reversecounter }}  #反向排列
{{ forloop.last }}  #返回false或者true 是否是最后一个循环
{{ forloop.first }}  #返回false或者true 是否是最后一个循环
 
多对多

class Host(models.Model):
   nid=models.AutoField(prmairy_key=True)
   hostname = models.CharField(max_length=32,db_index=True)
   
class Application(models.Model):
   name = models.CharField(max_length=32)
   r = models.ManyToManyField("Host")
  
  操作第三张表
  obj = Application.objects.get(id=1)
  obj.name
  
  obj.r.add(1)  在application id=1中增加 一个Host id=1的对应
  obj.r.add(2)   在application id=1中增加 一个Host id=2的对应
  obj.r.add(*[1,2.3.4])  增加多个关系
  obj.r.add(1,2,3)
  
  obj.r.remove(1)
  obj.r.remove(2,4)
   obj.r.remove(*[1,2.3.4])


obj.r.clear()
obj.r.set([3,5,7]）  #设置application id=1 对应的的只有3，5，7，其他的都会清空

获取
obj.r.all()   #id=1 的所有host对象

url补充
默认值
url(r'^index/',views.index,{'name','root'})
def index(request,name):
  print name
  
 命名空间
 /admin/   include('app01.urls',namespace)
 /crm/   include('app01.urls')

XSS  两种处理方式（让html代码在前端显示）
 在模板中处理 {{ page_str | safe }
 在views中处理 利用mark_save函数
 mark_safe(page_str)
 
 
 自定义分页
 current_page=request.GET.get('p',1)
 current_page = int(current_page)
 start = (current_page -1 )* 10
 end = current_page * 10
 data = LIST[start:end]
 
 求页数
 all_count=len(LIST)
count,y=  divmod(all_count,10)
if y:
   count +=1
 
当前页：current_page
总页数： total_count
每页显示10条数据：per_page_count
页码：11

如果：总页数 < 11
    start_index = 0
    end_index= 总页数
else:
    当前页 < =6:
      start_index =1
      end_index = 11
    else:
       start_index= 当前页 -5 
       end_index = 当前页 +5 +1
       如果 当前页 + 5 > 总页数:
          end_index = 总页数 + 1
         
       
   
   上一页  下一页
   
   
   
cookie  
def login(request):  
 res = redirect('index')
 res.set_cookie('username111',u)
 return res
 
def auth(func):
   def inner(request,*args,**kwargs):
      v = request.COOKIES.get('username11')
      if not v:
         return redirect('/login')
      return func(requst,*args,**kwargs)
   return inner

@auth
def index(request):
  #获取已经登陆的用户
  v = request.COOIKE.get('username111)
  return render(request,'index.html',{'v':v}





#表单
from django import form
class FM(forms.Form):
  user=forms.CharField(error_messages={'required':'用户名不能为空'})
  pwd = forms.CharField(widget=widgets.PasswordInput(attrs={'class':'c2'}),max_length=12,min_length=6,error_messages={'required':'密码不能为空','min_length':'密码长度不能小于6'，'max_length':'密码长度不能大于12'})
  email = forms.EmailField(error_messages={'required':'邮箱不能为空','invalid':'邮箱格式错误'})

def fm(request):
  if request.method == 'GET':
    obj = FM()
    return render(request,'fm.html',{'obj':obj})
  elif request.method == 'POST':
     obj = FM(request.POST)
     r1 = obj.is_valid()
     if r1:
       print(obj.cleaned_data)  #存储的数据字典
     else:
        print(obj.errors)     #错误信息 obj.errors为字典，拿数据 obj.errors['user']  <ul class='errorlist'><li>用户名不能为空</li></ul>
        return render(request,'fm.html',{ 'obj':obj })

<form action='/fm/' method="POST">
  {% csrf_token %}
  {{ obj.user }}
  <p><input type="text" name="user" /> {{ obj.errors.user.0 }}</p>
  {{ obj.pwd }}
  <p><input type="text" name="pwd" /> {{ obj.errors.pwd.0 }}</p>
  {{ obj.email }}
  <p><input type="text" name="email" /> {{ obj.errors.email.0 }}</p>
</form>


#method_decorator  
@method_decorator(auth,name='dispatch')

def user_info(request,nid):
  if request.method == 'GET':
    user_obj = models.UserInfo.objects.filter(id=nid).first()
    mf = UserInforModelForm(instance=user_obj)
    return render(request,'uesr_edit.html',{'mf':mf,'nid': nid}
  elif request.method == 'POST':
     user_obj = models.UserInfo.objects.filter(id=nid).first()
     mf = UserInfoModelForm(request.POST,instance=user_obj)
     if mf.is_valid():
       mf.save()
  else:
     print(mf.errors.as_json())
  return render(request,'uesr_edit.html',{'mf':mf,'nid':nid}
