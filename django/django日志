LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
        "default": {
            "format": '%(asctime)s %(name)s %(lineno)s %(levelname)s  %(message)s',
            "datefmt": "%Y-%m-%d %H:%M:%S"
        }
    },

    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'default'
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': '/tmp/debug.log',
            'when': "D",
            'interval': 1,
            'formatter': 'default'
        },
        "request": {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': '/tmp/request.log',
            'formatter': 'default'
        },
        "server": {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': '/tmp/server.log',
            'formatter': 'default'
        },
        "root": {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': '/tmp/root.log',
            'formatter': 'default'
        },

        "db_backends": {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': '/tmp/db_backends.log',
            'formatter': 'default'
        }
    },
    'loggers': {
        "reboot": {
            "level": "DEBUG",
            "handlers": ["console", "file"],
            'propagate': True,
        },
        "django": {
            "level": "DEBUG",
            "handlers": ["console", "file"],
            'propagate': True,
        },
        "django.request": {
            "level": "DEBUG",
            "handlers": ["request"],
            'propagate': False,
        },
        "django.server": {
            "level": "DEBUG",
            "handlers": ["server"],
            'propagate': False,
        },
        "django.db.backends": {
            "level": "DEBUG",
            "handlers": ["db_backends"],
            'propagate': False,
        }
    },
    'root':{
        "level": "DEBUG",
        "handlers": ["file"],
    }
}


  django 日志
  
  django使用python内建的logging 模打印日志，python的logging 配置由四个部分组成：
  
  记录器--Logger
  
  Logger 为日志系统的入口，每个Logger 的命名都是bucket ，你可以向这个bucket 写入需要处理的消息
  
  每个logger 都有个日志级别，日志级别表示该logger 将要处理的消息的严重性，python 定义以下几种日志级别
  
  DEBUG： 调试系统信息
  INFO： 普通系统信息
  WARNING： 出现一个较小的问题
  ERROR： 出现一个极大的问题
  CRITICAL 出现一个致命的错误
  
  写入Logger 的每条消息都是一条日志，每条日志也具有一个日志级别，它表示对应的消息严重性，每个日志记录还可以包含描述正在打印的事件的元信息
  
  当一条消息传递给logger 时，消息的日志级别将于logger的日志级别进行比较，如果消息的日志级别大于等于logger的日志级别，该消息将会继续处理，如果
  小于，该消息将被忽略
  
  Logger 一旦决定消息需要处理，它将传递该消息给一个Handler
  
  Logger配置
  logger 对应的值是一个字典，其每一个键都是logger的名字，每一个值又是一个字典，
  - level 可选，logger的级别
  - propagate 可选 logger的传播设置
  - filters  可选  logger的filter标识的列表
  - handlers  可选， logger的handler的标识列表
  
  配置实例
  LOGGING= {
    'loggers':{
        'reboot': {
            'handlers':['file_handler','console_handler'],
            'level':'DEBUG',
        }
    }
  
  
  }
  
  
  
  
  
  
  
  
  
  
  
  处理程序 --- Handler
  
  handler决定如何处理logger中的每条消息，它表示一个特定的日志行为，例如将消息写到屏幕上，写到文件中或者写到网络socket
  
  与logger一样，handler也有一个日志级别，如果消息的日志级别小于handler的级别，handler将忽略该消息
  
  logger 可以有多个handler ，而每个handler可以处理不同的日志级别，利用这种方式，可以根据消息的重要性提供不同形式的处理
  
  实例e
  
  LOGGING={
     'handlers':{
        'reboot':{
           'level':'DEBUG',
           'class': 'logging.StreamHandler',
           'formatter': 'simple',
        }
     }
  }
  
  
  
  
  过滤器 --- Filter 
  
  格式化 -- Formatter
  
  
  django 内置日志
  
  django  获取所有的日志
  
  django.request  处理与请求相关的日志，5xx响应报出error 日志，4xx报出WARNING 日志
  
  django.db.backends 处理与数据库之间交互的日志
  
  django.security.*  处理与安全相关的日志
  
  django.db.backends.schemea  处理数据库迁移时的日志
  
  
  
  










