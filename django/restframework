devops.io



QueryDict对象
在HttpRequest对象中，GET和POST 属性是django.http.QueryDict的实例，它是一个自定义的类似字典的类，用来处理同一个键带有多个值
这个类的需求来自某些html表单元素传递多个值给同一个键

request.POST 和request.GET的QueryDict在一个正常的请求响应循环中是不可变的，如果要获得可变的版本，请使用.copy()
 <QueryDict: {'name': ['rock','panda']}>
 
 
 实例化QueryDict
 
 QueryDict('a=1&a=2&c=3')
 <QueryDict: {'a':['1','2'],'c':['3']}>
 
 通过fromkeys实例化QueryDict(1.11)
 QueryDict.fromkeys(['a','a','b'],value='val)
 <QueryDict: {'a':['val','val],'b':['val]}>
 
 
 django 不会在user模型上存储原始的（明文）密码，而只是一个哈希，因为这个原因，不要尝试直接操作user的password属性
 这也是为什么创建一个user时要使用辅助函数
 from django.contrib.auth.models import User
 u=User.objects.get(username='rock')
 u.set_password('34eer')
 u.save()
 
 django 如何处理一个请求
 
 1.django加载ROOT_URLCONF指定的模块，并寻找可用的urlpatterns，它是django.conf.urls.url()实例的一个python列表
 2.django 依次匹配每个url，在与请求的url匹配的第一个url停下来
 3.一旦其中的一个正则表达式匹配上，django将导入并调用给出的视图，它是一个简单的python函数（或者一个基于类的视图），视图将获得如下参数
 
 参数1： 一个HttpRequest实例
 参数2：如果匹配的正则表达式返回了没有命名的组，那么正则表达式匹配的内容将作为位置参数提供给视图
 参数3：关键字参数由正则表达式匹配的命名组组成，
 
 
 url 函数
 url(regex,view,kwargs=none,name=none)
 
 kwargs：传递额外的参数给视图
 
 
 url 参数-位置参数
 
 如果要从url中捕获一个值，只需要在它的周围放置一对圆括号
 
 url(r'^articles/([0-9]{4}/([0-9]{2})/([0-9]+)/$)',views.article_detail)

请求地址： /articles/2003/03/03
调用函数：views.article_detail(request,"2003",'03','03')

url关键字参数
（?p<name>pattern）
name 是传给视图的参数名字，pattern是一个正则表达式，也是关键字参数的值

url(r'^articles/(?P<year>[0-9]{4})/(?P<month>[0-9]{2})/$')
请求地址
/articles/2003/03/
调用函数：views.article_detail(request,year='2003',month='03')
 
 
 url参数--额外参数
 django.conf.urls.url() 函数可以接收一个可选的第三个参数，它是一个字典，表示想要传递给视图的额外关键字参数
 
 url(r'^blog/(?P<year>[0-9]{4})/$',view.year_article,{'foo':'bar'})
 请求地址：/blog/2015/
 调用函数： views.year_archive(request,year='2005',foo='bar')
 
 
 
 View 
 属性：
 http_method_names
 
 方法：
 as_view()
 dispatch()
 http_method_not_allowed()
 
 分页原理
 
 select * from user limit 10   第一页
 select * from user limit 11,20 第二页
 select * from user limit (n-1)*10+1,n*10
 相应的切片则为
 User.objects.all()[10] 0-9的记录
 User.objects.all()[10:20] 10-19的记录
 User.object.all()[(n-1)*10:n*10]
 
 queryset 数据类型转json类型
 list(queryset)
 
 
 django 分页对象
 Paginator 对象
 class Paginator(object_list,per_page,orphans=0,allow_empty_first_page=True)
 
 Required arguments
 - object_list
 - per_page
 
 属性
 
 -Paginator.count 所有页面的objects总数
 - Paginator.num_pages 页面总数
 - Paginator.page_range 页码的范围，从1开始[1,2,3,4]
 
 方法
 Paginator.page(number) 返回一个page 对象，number 当前显示的是第几页
 
 
 Page 对象
 
 class Page(object_list,number,paginator)
 
 属性
 - Page.object_list 当前页面的对象列表
 - Page.number 当前页的序号，从1开始
 - Page.paginator  Paginator对象
 
 方法
  - Page.has_next() 如果有下一页，返回True
  - Page.has_previous() 如果有上一页，返回True
  - Page.has_other_pages() 如果有上一页或者下一页，返回True
  - Page.next_page_number() 返回下一页的页码，如果不存在抛出InvalidPage 异常
  - Page.previous_page_number（） 返回上一页的页码，如果不存在，抛出InvalidPage异常
  
  
  
  
  django 序列化
  
  将queryset 转换为josn 字符串
  
  序列化模型对象
  from django.core import serializers
  data = serializers.serializer("json",SomeModel.objects.all())


序列化子集

data = serializers.serializer("json",User.objects.all()[0:10],fields=('username','is_active'))
  
 多对一查询
 
 正向查询（ForeiKey所在的模型查询关联的模型）
 car = Car.objects.get(pk=2)
 cat.manufacturer.all()    #返回一条Manufacturer对象
 
 反向查询（ForeignKey 指向的模型查询ForeignKey所在的模型）
 如果模型有一个ForeignKey，那么该ForeignKey所指的模型实例可以通过一个管理器返回前一个有ForeignKey的模型的所有实例
 默认情况下，这个管理器的名字为foo_set，其中foo是原模型的小写名字，该管理器返回的查询集可以用过滤
 
 manufacturer = Manufacturer.objects.get(pk=1)
 
 manufacturer.car_set.all()  返回多个car对象 manufacturer.car_set管理器
 
 处理关联对象的其他方法
 


 
 多对多
 user1=User.objects.get(username_exact='hh')
 op=Group.objects.get(name='op)
 op.user_set.add(user1)
 op.user_set.remove(user1)
 op.user_set.clear()
 
  
 create(**kwargs)  创建一个新的对象，将它保存并放在关联的对象集中，返回新创建的对象
 
 add(obj1,obj2,...)  添加一指定的模型对象到关联的对象集中
 
 remove(obj1,obj2,...)  从关联的对象集中删除指定的模型对象
 
 
 clear()  从关联的对象集中删除所有的对象
 
 
一对一
是通过django.db.models.OneToOneField来实现的，被关联的Model会被加上Unique的限制，OneToOneField 是一个位置参数，与模型关联的类

当某个对象想扩展自另一个对象是，最常用的方式就是在这个对象的主键上添加一对一的关系

正查： userprofile.user.username
反查：user.userprofile.name
 
 
 
 查询op组下的用户
 
 Users.objects.filter(groups__name__exact='op')
 
 
  Permission
  
  django 定义每个Model后，默认都会添加该Model的add change delete三个permisson,自定义的permission可以在我们定义model
  时手动添加
  
  class Server(models.Model):
  
  
      class Meta:
           permissions = (
           ("view_server","can view server"),
           ("change_server_status","can change the status of server"),
           )
每个permission都是django.contrib.auth.Permission类型的实例，该类型包含三个字段name,codename,content_type

content_type 反应了permission属于哪个model
codename 代码逻辑中检查权限时要用
name 是permission的描述，将permission打印到屏幕或者页面时默认显示的就是name


User对象的user_permission 字段管理用户的权限

user = User.objects.get(username="rock")
user.user_permission = [permission_list]
user.user_permission.add(permission,permission,....) 增加权限
user.user_permission.remove(permission,permission..)  删除权限
user.user_permission.clear()  #清空权限
user.get_all_permissions() #列出用户所有权限
user.get_group_permission() #列出用户所属组的权限
  
 
 
Group permission 
group permission 管理逻辑和user permission管理一致，group 中使用permission字段做权限管理

group.permissions.set([permission_list])
group.permissions.add(permission,permission)
group.permissions.remove(permission,permission)
group.permissions.clear()


权限验证-普通视图
在视图中验证权限-permission_required

from django.contrib.auth.decorators import login_required,permission_required

@login_required
@permission_required('dashboard.view_server)
def my_view(request):
  ....
  
权限验证-类视图

from django.utils.decorators import method_decorator
from django.contrib.auth.decorators import login_required,permission_required

class ServerView(TemplateView)
  @method_decorator(login_required)
  @method_decorator(permission_required("dashboard.viwe_server"))
  
  def get(self,request,*args,**kwargs):
     ...
     
     
 权限验证-viwe代码中验证
 if not request,user,has_perm("dashboard.view_server"):
    return HttpResponse('Forbidden')
 
  #发送post请求登陆，获取token
  curl -X POST  -H "Content-Type: application/json" -d '{"username":"admin","password":"pwd"}' http://192.168.1.188:8000/api-token-auth/
  
  curl -X GET http://127.0.0.1:8000/users/ -H 'Authorization: Token 99444554545fjkdsfjsk' | python2 -m json.tool
  
  
  
  
  
  
  
  
 
 
 
 
 
