https://www.lightxue.com/transforming-code-into-beautiful-idiomatic-python
https://michaelyou.github.io/2015/04/16/%E4%B8%80%E4%BA%9Bpythonic%E4%BB%A3%E7%A0%81%E7%9A%84%E4%BE%8B%E5%AD%90/

遍历一个范围内的数字
for i in [0, 1, 2, 3, 4, 5]:
    print i ** 2

for i in range(6):
    print i ** 2
更好的方法

for i in xrange(6):
    print i ** 2
xrange会返回一个迭代器，用来一次一个值地遍历一个范围。这种方式会比range更省内存。xrange在Python 3中已经改名为range。


遍历一个集合

colors = ['red', 'green', 'blue', 'yellow']

for i in range(len(colors)):
    print colors[i]
更好的方法

for color in colors:
    print color
   
  
反向遍历

colors = ['red', 'green', 'blue', 'yellow']

for i in range(len(colors)-1, -1, -1):
    print colors[i]
更好的方法

for color in reversed(colors):
    print color
    
遍历一个集合及其下标
colors = ['red', 'green', 'blue', 'yellow']

for i in range(len(colors)):
    print i, '--->', colors[i]
更好的方法

for i, color in enumerate(colors):
    print i, '--->', color
   
##百分号的使用

通常我们都是这样格式化字符串的:

print 'hello world programme by %s' % 'python'  
但是如果格式化的字符串中有很多%s,那么程序的可读性就会依靠于%后面 的变量名起得是否好了。

这个时候有一种用dict来格式化的%，我觉得很有用，尤其是在记log的 时候，作为log的格式，可读性非常高。
代码如下：

#字符串  
value = {'what': 'hello, world', 'language': 'python'}  
print '%(what)s, %(language)s' % value  
#也可以包含int的  
value = {'name': 'jianpx', 'age': 23}  
print '%(name)s 's age is  %(age)i' % value

用两个元素之间有对应关系的list构造一个dict：
用两个元素之间有对应关系的list构造一个dict：
运用zip可以非常简单的实现：

names = ['jianpx', 'yue']  
ages = [23, 40]  
m = dict(zip(names,ages))  

##交换两个值：
a,b = b,a
右边的b,a 其实可以理解成一个tuple。

##数量多的字符串相连用join：
#以前是这样写的  
fruits = ['apple', 'banana']  
result = ''  
for f in fruits:  
    result += f  

#现在可以这样：  
fruits = ['apple', 'banana']  
result = ''.join(fruits)

##判断一个key是否在一个dict里面：
以前很经常犯的一个mistake是这样做：

if key in dict_example:  
    do something  
现在要这样写，就不用使用in操作了。

if dict_example.has_key(key):  
    do something  
    
 ##去掉list中的重复元素：

old_list = [1,1,1,3,4]  
new_list = list(set(old_list))

##分隔一个字符串，去里面的元素，,但是空白字符串不要：
例如， names = ‘jianpx, yy, mm, , kk’

names = 'jianpx, mm, yy, , kk'  
name_list = names.split(',')  
result = []  
for name in name_list:  
    if name:  
        result.append(name)  
现在是这样写的：

names = 'jianpx, yy, mm, , kk'  
result = [name for name in names.split(',') if name.strip()]  


##模拟c语言中的 a?b:c
在python里面可以这样做：

return_value = True if a == 1 else False  
从而代替了这样的代码：

if a == 1:  
    return_value = True  
else   
    return_value = False  
##如何将list的元素倒序并且生成到新的list呢？

看到一个用list的slice做到的 :

a = [1,2,3,4]  
c = 'abcdef'  
aa= a[::-1]  
cc = c[::-1]  
如果不用生成新的list，直接调用a.reverse()就得了。但是字符串类型没有reverse的方法.
如果不用生成新的list，直接调用a.reverse()就得了。但是字符串类型没有reverse的方法.

关于list的slice特性， 其实也许很多人平时只是用list[start:end] 这样的， 这个意思是从start开始，每个元素都放到新的list里面， 直到end。
但是其实还可以每隔N个元素才取一次的， 这种情况要3个参数:·list[start:end:step]，step就是间隔了。

##a = [i for i in xrange(5)] 和 a = (i for i in xrange(5))

虽然看上去是一样都生成了5个元素，但是
前者是一个list对象， 如果遍历的话 for item in a 就会一下子返回全部元素然后再遍历， 而后者是个Generator，
用for item in a遍历是每次只是返回一个元素， 这样的好处是省内存（在list很大的情况下）。
##python的all函数可以简化逻辑表达式有很多”与“的时候的写法
比如：

a, b, c = True, False, True
if a and b and c:
    return True
else:
    return False
可以简化成:
    return all([a, b, c])
由此可以看到all函数的作用是判断当且仅当参数里面都为真的时候返回真， 否则返回假。
